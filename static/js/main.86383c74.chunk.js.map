{"version":3,"sources":["web3.js","components/Alert.js","components/Button.js","contract.js","components/AlertModal.js","App.js","serviceWorker.js","index.js"],"names":["web3","Alert","_ref","message","status","react_default","a","createElement","className","concat","Button","loading","onClick","content","window","provider","currentProvider","Web3","contract","eth","Contract","contractData","interface","address","AlertModal","show","children","lib_default","visible","width","height","effect","onClickAway","App","state","peopleThatPayed","modal","amountToPay","alert","modalContent","this","scrollIntoView","behavior","getAccounts","accounts","console","log","methods","findHowManyPeoplePayed","call","from","error","_context","t0","setState","scrollToBottom","amountThatPay","modalMessage","href","target","Error","displayModal","getHowManyPeoplePayed","length","payToSatisfyCuriosity","send","value","utils","toWei","gas","_context2","displayError","_this2","src_components_AlertModal","src_components_Button","satisfyCuriosity","bind","ref","el","src_components_Alert","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.86383c74.chunk.js","sourcesContent":["import Web3 from 'web3';\n\nlet web3;\n\nif (typeof window !== 'undefined' && typeof window.web3 !== 'undefined') {\n    // We are in the browser and metamask is running.\n    const provider = window.web3.currentProvider;\n    // Security measure for metamask\n    // provider.enable();\n    web3 = new Web3(provider);\n} else\n    web3 = null;\n\nexport default web3;","import React from 'react';\nimport './Alert.css';\n\nconst Alert = ({message, status}) => {\n    if (message !== '')\n        return (\n            <div className={`alert ${status}`}>\n                {message}\n            </div>\n        );\n    else return <div></div>;\n};\n\nexport default Alert;","import React from 'react';\nimport './Button.css';\n\nconst Button = ({message, loading, onClick}) => {\n    const content = loading === true ? /*<div className=\"loader\"></div>*/\n        <div><i className=\"fa fa-spinner fa-spin\"></i> Loading</div> : message;\n\n    return (\n        <div className='button-container'>\n            <button className=\"button blue\" onClick={onClick}>\n                {content}\n            </button>\n        </div>\n    );\n};\n\nexport default Button;","import web3 from './web3';\nimport contractData from './contractData.json';\n\nlet contract = null;\n\nif (web3 != null)\n    contract = new web3.eth.Contract(contractData.interface, contractData.address);\n\nexport default contract;\n","import React from 'react';\nimport Modal from 'react-awesome-modal';\nimport './AlertModal.css';\n\nconst AlertModal = ({show, onClick, children}) => {\n\n    return (\n        <section>\n            <Modal visible={show} width=\"500\" height=\"150\" effect=\"fadeInUp\" onClickAway={onClick}>\n                <div className='modal-background'>\n                    {children}\n                </div>\n            </Modal>\n        </section>\n    );\n};\n\nexport default AlertModal;","import React, {Component} from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\nimport Button from './components/Button';\nimport web3 from './web3';\nimport contract from './contract';\nimport AlertModal from \"./components/AlertModal\";\n\nconst MODAL_NO_METAMASK = 'no_metamask';\nconst MODAL_PAID = 'paid';\n\nclass App extends Component {\n    state = {\n        message: '',\n        loading: false,\n        status: '',\n        peopleThatPayed: 0,\n        modal: false\n    };\n\n    amountToPay = '0.01';\n    alert = null;\n    modalContent = '';\n\n\n    scrollToBottom() {\n        this.alert.scrollIntoView({behavior: 'smooth'});\n    }\n\n    async getHowManyPeoplePayed() {\n        if (web3 != null) {\n            try {\n                const accounts = await web3.eth.getAccounts();\n                console.log('Asking for people that payed on init from ' + accounts[0]);\n                const peopleThatPayed = await contract.methods.findHowManyPeoplePayed().call({from: accounts[0]});\n                console.log(peopleThatPayed);\n                return peopleThatPayed;\n            } catch (e) {\n                console.error('Couldn\\'t fetch how many people paid', e.message);\n            }\n            return null;\n        }\n    }\n\n    displayError(error) {\n        this.setState({message: error.message, status: '', loading: false});\n        this.scrollToBottom();\n    }\n\n    displayModal(modal, amountThatPay) {\n        let modalMessage;\n\n        switch (modal) {\n            case MODAL_NO_METAMASK:\n                modalMessage = (<div>\n                    <h3 className='Subtitle'>You need MetaMask to realize a transaction</h3>\n                    You need it to interact with a Dapps.<br/>\n                    Please, intall it <a href='https://metamask.io/' target='_blank'>using this link</a>\n                </div>);\n                break;\n            case MODAL_PAID:\n                modalMessage = (<h3 className='Subtitle'>{amountThatPay} people paid to see how many people paid!</h3>);\n                break;\n            default:\n                throw Error('Incorrect modal parameter');\n        }\n\n        this.modalContent = modalMessage;\n        this.setState({modal: true, message: '', loading: false});\n    }\n\n    async satisfyCuriosity() {\n        if(this.state.loading)\n            return;\n        this.setState({\n            message: 'Loading, operations take about 15 seconds to complete.',\n            status: 'info',\n            loading: true\n        });\n        if (web3 == null) {\n            this.displayModal(MODAL_NO_METAMASK);\n        } else {\n            const peopleThatPayed = await this.getHowManyPeoplePayed();\n            if (peopleThatPayed !== null)\n                this.displayModal(MODAL_PAID, peopleThatPayed);\n            else {\n                const accounts = await web3.eth.getAccounts();\n                this.scrollToBottom();\n                try {\n                    if (accounts.length === 0) {\n                        this.setState({\n                            message: 'You need to be logged inside Metamask',\n                            status: 'error',\n                            loading: false\n                        });\n                        this.scrollToBottom();\n                        return;\n                    }\n                    this.setState({\n                        message: 'Please wait. The operation takes about 15 seconds since it\\'s accepted.',\n                        status: 'info',\n                        loading: true\n                    });\n\n                    await contract.methods.payToSatisfyCuriosity().send({\n                        from: accounts[0],\n                        value: web3.utils.toWei(this.amountToPay, 'ether'),\n                        gas: '1000000'\n                    });\n                    const peopleThatPayed = await this.getHowManyPeoplePayed();\n                    this.displayModal(MODAL_PAID, peopleThatPayed);\n                } catch (e) {\n                    console.error(e);\n                    this.displayError(e);\n                }\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <AlertModal onClick={() => this.setState({modal: false})} show={this.state.modal}>\n                    {this.modalContent}\n                </AlertModal>\n                <div className=\"App\">\n                    <h1 className={\"Title\"}>How many people paid {this.amountToPay} ether to see how many people\n                        paid {this.amountToPay} ether?</h1>\n                    <h3 className={\"Subtitle\"}>Curious?</h3>\n                    <Button onClick={this.satisfyCuriosity.bind(this)} message={'Find out now'}\n                            loading={this.state.loading}/>\n                    <div ref={(el) => {\n                        this.alert = el;\n                    }}>\n                        <Alert message={this.state.message} status={this.state.status}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}